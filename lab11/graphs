import org.jgrapht.Graph;
import org.jgrapht.graph.DefaultDirectedGraph;
import org.jgrapht.graph.DefaultEdge;
import org.jgrapht.alg.interfaces.LongestPathAlgorithm;
import org.jgrapht.alg.shortestpath.LongestPath;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        // Create a directed acyclic graph
        Graph<Integer, DefaultEdge> graph = new DefaultDirectedGraph<>(DefaultEdge.class);
        graph.addVertex(1);
        graph.addVertex(2);
        graph.addVertex(3);
        graph.addVertex(4);
        graph.addEdge(1, 2);
        graph.addEdge(2, 3);
        graph.addEdge(1, 4);
        graph.addEdge(4, 3);

        // Find the longest path in the graph
        LongestPathAlgorithm<Integer, DefaultEdge> longestPathAlgorithm = new LongestPath<>(graph);
        List<Integer> longestPath = longestPathAlgorithm.getLongestPath(1, 3);

        // Print the longest path
        System.out.println("Longest Path: " + longestPath);
    }
}
